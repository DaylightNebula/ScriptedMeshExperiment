let mesh = new_mesh();

mesh.insert_positions([ 
    vec(-1.0, 1.0, -1.0),
    vec(1.0,   1.0, -1.0),
    vec(-1.0,  1.0,  1.0),
    vec(1.0,   1.0,  1.0),
    vec(-1.0, -1.0, -1.0),
    vec(1.0,  -1.0, -1.0),
    vec(-1.0, -1.0,  1.0),
    vec(1.0,  -1.0,  1.0),
    vec(-1.0,  1.0,  1.0),
    vec(1.0,   1.0,  1.0),
    vec(-1.0, -1.0,  1.0),
    vec(1.0,  -1.0,  1.0),
    vec(-1.0,  1.0, -1.0),
    vec(1.0,   1.0, -1.0),
    vec(-1.0, -1.0, -1.0),
    vec(1.0,  -1.0, -1.0),
    vec(-1.0,  1.0,  1.0),
    vec(-1.0,  1.0, -1.0),
    vec(-1.0, -1.0,  1.0),
    vec(-1.0, -1.0, -1.0),
    vec(1.0,   1.0,  1.0),
    vec(1.0,   1.0, -1.0),
    vec(1.0,  -1.0,  1.0),
    vec(1.0,  -1.0, -1.0)]
);

mesh.insert_indices([
    2, 6, 7,
    2, 7, 3,
    0, 5, 4,
    0, 1, 5,
    0, 6, 2,
    0, 4, 6,
    1, 3, 7,
    1, 7, 5,
    0, 2, 3,
    0, 3, 1,
    4, 7, 6,
    4, 5, 7
]);

mesh.insert_normals([ 
    vec(-1.0, 1.0, -1.0),
    vec(1.0,   1.0, -1.0),
    vec(-1.0,  1.0,  1.0),
    vec(1.0,   1.0,  1.0),
    vec(-1.0, -1.0, -1.0),
    vec(1.0,  -1.0, -1.0),
    vec(-1.0, -1.0,  1.0),
    vec(1.0,  -1.0,  1.0),
    vec(-1.0,  1.0,  1.0),
    vec(1.0,   1.0,  1.0),
    vec(-1.0, -1.0,  1.0),
    vec(1.0,  -1.0,  1.0),
    vec(-1.0,  1.0, -1.0),
    vec(1.0,   1.0, -1.0),
    vec(-1.0, -1.0, -1.0),
    vec(1.0,  -1.0, -1.0),
    vec(-1.0,  1.0,  1.0),
    vec(-1.0,  1.0, -1.0),
    vec(-1.0, -1.0,  1.0),
    vec(-1.0, -1.0, -1.0),
    vec(1.0,   1.0,  1.0),
    vec(1.0,   1.0, -1.0),
    vec(1.0,  -1.0,  1.0),
    vec(1.0,  -1.0, -1.0)]
);

debug(mesh);
return mesh;